#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <unistd.h>
#define SHM_SIZE 1024  // Size of the shared memory segment
int main() {
    int shmid;
    key_t key = 1234; // Unique key for the shared memory
    char *shm_ptr;

    // Create the shared memory segment
    shmid = shmget(key, SHM_SIZE, IPC_CREAT | 0666);
    if (shmid < 0) {
        perror("shmget failed");
        exit(1);
    }

    // Attach the shared memory segment to our process's address space
    shm_ptr = shmat(shmid, NULL, 0);
    if (shm_ptr == (char *) -1) {
        perror("shmat failed");
        exit(1);
    }

    // Fork a child process
    if (fork() == 0) {
        // Child process
        // Write to the shared memory
        printf("Child process writing to shared memory...\n");
        strcpy(shm_ptr, "Hello from child process!");

        // Detach from shared memory
        shmdt(shm_ptr);
        exit(0);
    } else {
        // Parent process
        // Wait for child process to finish
        wait(NULL);

        // Read from the shared memory
        printf("Parent process reading from shared memory...\n");
        printf("Data read from shared memory: %s\n", shm_ptr);

        // Detach from shared memory
        shmdt(shm_ptr);

        // Destroy the shared memory segment
        shmctl(shmid, IPC_RMID, NULL);
    }

    return 0;
}
